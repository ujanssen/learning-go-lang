package main

import (
	"fmt"
	"os"
	"github.com/nilshell/xmlrpc"
)

{{range .XapiObjects}}
{{ $objectName := .Name }}
{{range .Messages}}
// {{$objectName}}_{{.Name}}
//
// {{ .Description }}
//
// params:{{range .Params }}
// - {{.Name}}, {{.Type}}, {{.Doc}}{{end}}
//
// returns:{{range .Result }}
// - {{.}}{{end}}
func (client *XenAPIClient) {{$objectName}}_{{.Name}}({{range .Params}}{{.Name}} {{ .Type }},{{end}}) (i interface{}, err error){
	return client.RPCCall("{{$objectName}}.{{.Name}}", {{range .Params }}{{.Name}},{{end}})
}
{{end}}{{end}}

const (
	XS_HOST   = "XS_HOST"
	XS_USER   = "XS_USER"
	XS_PASSWD = "XS_PASSWD"
)

type XenAPIClient struct {
    Session  interface{}
    Host     string
    Url      string
    Username string
    Password string
    RPC      *xmlrpc.Client
}

func NewXenAPIClient(host string) (client XenAPIClient) {
    client.Host = host
    client.Url = "http://" + host
    client.RPC, _ = xmlrpc.NewClient(client.Url, nil)
    return
}

type APIResult struct {
    Status           string
    Value            interface{}
    ErrorDescription string
}

type XenAPIObject struct {
    Ref    string
    Client *XenAPIClient
}

func (c *XenAPIClient) RPCCall(method string, argi ...interface{}) (resultValue interface{}, err error) {

    params := make([]interface{}, len(argi))
    for i, element := range argi {
        params[i] = element
    }

    xmlrpcParams := new(xmlrpc.Params)
    xmlrpcParams.Params = params

    result := xmlrpc.Struct{}

    err = c.RPC.Call(method, *xmlrpcParams, &result)

    if err != nil {
        fmt.Errorf("RPC Call Error: %s", err)
    } else {
        resultValue = result["Value"]
    }
    return resultValue, err
}

func main() {
    host, user, passwd := os.Getenv(XS_HOST), os.Getenv(XS_USER), os.Getenv(XS_PASSWD)
    client := NewXenAPIClient(host)

    fmt.Println("NewXenAPIClient for: " + client.Host)
    fmt.Println("login_with_password: " + user + "/" + passwd)

    session, err := client.session_login_with_password(user, passwd, "", "")
    if err != nil {
        fmt.Printf("err: %v\n", err)
    }

    vms, err := client.VM_get_all(session)

    // list running VMs
    for _, vm := range vms.([]interface{}) {
        ps, err := client.VM_get_power_state(session, vm)
        if err != nil {
            fmt.Printf("err: %v\n", err)
        }
        if ps.(string) == "Running" {
            fmt.Printf("%+v VM_get_power_state: %+v\n", vm, ps)
        }
    }

    _, err = client.session_local_logout(session)
    if err != nil {
        fmt.Printf("err: %v\n", err)
    }
}