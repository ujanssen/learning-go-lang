package main

import (
	"errors"
	"fmt"
	"github.com/nilshell/xmlrpc"
)

type XenAPIClient struct {
	Session  interface{}
	Host     string
	Url      string
	Username string
	Password string
	RPC      *xmlrpc.Client
}

type APIResult struct {
	Status           string
	Value            interface{}
	ErrorDescription string
}

type XenAPIObject struct {
	Ref    string
	Client *XenAPIClient
}

func (c *XenAPIClient) RPCCall(result interface{}, method string, params []interface{}) (err error) {
	p := new(xmlrpc.Params)
	p.Params = params
	err = c.RPC.Call(method, *p, result)
	return err
}

func (client *XenAPIClient) APICall(result *APIResult, method string, params ...interface{}) (err error) {
	if client.Session == nil {
		return fmt.Errorf("No session. Unable to make call")
	}

	//Make a params slice which will include the session
	p := make([]interface{}, len(params)+1)
	p[0] = client.Session

	if params != nil {
		for idx, element := range params {
			p[idx+1] = element
		}
	}

	res := xmlrpc.Struct{}

	err = client.RPCCall(&res, method, p)

	if err != nil {
		return err
	}

	result.Status = res["Status"].(string)

	if result.Status != "Success" {
		return fmt.Errorf("API Error: %s", res["ErrorDescription"])
	} else {
		result.Value = res["Value"]
	}
	return
}


{{range .Xapi}}
{{if eq .Name "session" }}
{{ $xtype := .Name }}
// {{ .Description }}
type {{ .Name }} struct {
	{{range .Fields}}{{ .Name }}     {{ .Type }}
	{{end}}
}
{{range .Messages}}
{{ $message := . }}
{{if eq .Name "login_with_password" }}
func ({{ $xtype }} *{{ $xtype }}) {{ .Name }}({{range .Params}}{{ .Name }} {{ .Type }},{{end}}) (err error){
	result := xmlrpc.Struct{}

	params := make([]interface{}, {{ $message.ParamsLen }})
	params[0] = client.Username
	params[1] = client.Password

	err = client.RPCCall(&result, "session.login_with_password", params)
}
{{end}}{{end}}{{end}}{{end}}

func (client *XenAPIClient) Login() (err error) {
	//Do loging call
	result := xmlrpc.Struct{}

	params := make([]interface{}, 2)
	params[0] = client.Username
	params[1] = client.Password

	err = client.RPCCall(&result, "session.login_with_password", params)
	if err == nil {
		// err might not be set properly, so check the reference
		if result["Value"] == nil {
			return errors.New ("Invalid credentials supplied")
		}
	}	
	client.Session = result["Value"]
	return err
}

func main() {
		fmt.Println("it compiles")
}
